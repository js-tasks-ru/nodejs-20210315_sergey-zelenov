const LimitSizeStream = require('../LimitSizeStream');
const LimitExceededError = require('../LimitExceededError');
const expect = require('chai').expect;
const sinon = require('sinon');

describe('streams/limit-size-stream', () => {
  describe('LimitSizeStream', () => {
    it('—Å—Ç—Ä–∏–º –ø–µ—Ä–µ–¥–∞–µ—Ç –ø–æ—Å—Ç—É–ø–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π', (done) => {
      const limitStream = new LimitSizeStream({limit: 3, encoding: 'utf-8'});

      const onData = sinon.spy();

      limitStream.on('data', onData);
      limitStream.on('end', () => {
        expect(onData.calledTwice, `—Å–æ–±—ã—Ç–∏–µ 'data' –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏ 2 —Ä–∞–∑–∞`).to.be.true;
        expect(onData.firstCall.args[0],
          `–ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ —Å–æ–±—ã—Ç–∏—è 'data' –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞ 'a'`)
          .to.equal('a');
        expect(onData.secondCall.args[0],
          `–ø—Ä–∏ –≤—Ç–æ—Ä–æ–º –≤—ã–∑–æ–≤–µ —Å–æ–±—ã—Ç–∏—è 'data' –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞ 'b'`)
          .to.equal('b');
        done();
      });

      limitStream.write('a');
      limitStream.write('b');
      limitStream.end();
    });

    it('–ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –æ—à–∏–±–∫–∞', (done) => {
      const limitStream = new LimitSizeStream({limit: 2, encoding: 'utf-8'});

      const onData = sinon.spy();

      limitStream.on('data', onData);
      limitStream.on('error', (err) => {
        expect(err).to.be.instanceOf(LimitExceededError);
        expect(onData.calledTwice, `—Å–æ–±—ã—Ç–∏–µ 'data' –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏ —Ç–æ–ª—å–∫–æ 2 —Ä–∞–∑–∞`).to.be.true;
        expect(onData.firstCall.args[0],
          `–ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ —Å–æ–±—ã—Ç–∏—è 'data' –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞ 'a'`)
          .to.equal('a');
        expect(onData.secondCall.args[0],
          `–ø—Ä–∏ –≤—Ç–æ—Ä–æ–º –≤—ã–∑–æ–≤–µ —Å–æ–±—ã—Ç–∏—è 'data' –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞ 'b'`)
          .to.equal('b');

        done();
      });

      limitStream.on('close', () => {
        expect(limitStream.readableEnded, `—Å—Ç—Ä–∏–º –¥–æ–ª–∂–µ–Ω –≤—ã–±—Ä–æ—Å–∏—Ç—å –æ—à–∏–±–∫—É –∏—Å–ø–æ–ª—å–∑—É—è —Å–æ–±—ã—Ç–∏–µ 'error'`).to.be.false;
      })

      limitStream.write('a');
      limitStream.write('b');
      limitStream.end('c');
    });

    it('–ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–∏–º–∏—Ç–∞ –¥–æ–ª–∂–Ω–æ —É—á–∏—Ç—ã–≤–∞—Ç—å—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–π—Ç, –∞ –Ω–µ —Å–∏–º–≤–æ–ª–æ–≤', (done) => {
      const smile = 'üòÄ';
      const limitStream = new LimitSizeStream({limit: Buffer.from(smile).length * 2 + 1, encoding: 'utf-8'});

      const onData = sinon.spy();

      limitStream.on('data', onData);
      limitStream.on('error', (err) => {
        expect(err).to.be.instanceOf(LimitExceededError);

        expect(onData.calledTwice, `—Å–æ–±—ã—Ç–∏–µ 'data' –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏ —Ç–æ–ª—å–∫–æ 2 —Ä–∞–∑–∞`).to.be.true;

        expect(onData.firstCall.args[0],
          `–ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ —Å–æ–±—ã—Ç–∏—è 'data' –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞ 'üòÄ'`)
          .to.equal(smile);

        expect(onData.secondCall.args[0],
          `–ø—Ä–∏ –≤—Ç–æ—Ä–æ–º –≤—ã–∑–æ–≤–µ —Å–æ–±—ã—Ç–∏—è 'data' –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞ 'üòÄ'`)
          .to.equal(smile);

        done();
      });

      limitStream.on('close', () => {
        expect(limitStream.readableEnded, `—Å—Ç—Ä–∏–º –¥–æ–ª–∂–µ–Ω –≤—ã–±—Ä–æ—Å–∏—Ç—å –æ—à–∏–±–∫—É –∏—Å–ø–æ–ª—å–∑—É—è —Å–æ–±—ã—Ç–∏–µ 'error', –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥—Å—á–µ—Ç –±–∞–π—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–µ–≤–µ—Ä–Ω–æ`).to.be.false;
      })

      limitStream.write(smile);
      limitStream.write(smile);
      limitStream.end(smile);
    });

  });
});
